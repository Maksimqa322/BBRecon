#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑–≤–µ–¥–∫–∏
"""

import os
import subprocess
import signal
import psutil
import time

def find_recon_processes():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑–≤–µ–¥–∫–∏"""
    recon_processes = []
    
    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    keywords = ['subfinder', 'httpx', 'waybackurls', 'katana', 'urlfinder', 'recon.py']
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            for keyword in keywords:
                if keyword in cmdline.lower():
                    recon_processes.append(proc)
                    break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    return recon_processes

def kill_process_tree(pid):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤—Å–µ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    try:
        parent = psutil.Process(pid)
        children = parent.children(recursive=True)
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for child in children:
            try:
                child.terminate()
            except psutil.NoSuchProcess:
                pass
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        gone, alive = psutil.wait_procs(children, timeout=3)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for child in alive:
            try:
                child.kill()
            except psutil.NoSuchProcess:
                pass
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        parent.terminate()
        try:
            parent.wait(timeout=3)
        except psutil.TimeoutExpired:
            parent.kill()
        
        return True
    except psutil.NoSuchProcess:
        return False

def main():
    print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑–≤–µ–¥–∫–∏...")
    
    recon_processes = find_recon_processes()
    
    if not recon_processes:
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑–≤–µ–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(recon_processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑–≤–µ–¥–∫–∏:")
    
    for proc in recon_processes:
        try:
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else proc.info['name']
            print(f"  PID {proc.info['pid']}: {cmdline[:100]}...")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    print("\n‚ö†Ô∏è  –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑–≤–µ–¥–∫–∏...")
    
    killed_count = 0
    for proc in recon_processes:
        try:
            if kill_process_tree(proc.info['pid']):
                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                killed_count += 1
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.info['pid']}: {e}")
    
    print(f"\nüìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} –∏–∑ {len(recon_processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
    remaining = find_recon_processes()
    if remaining:
        print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {len(remaining)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º...")
        for proc in remaining:
            try:
                proc.kill()
                print(f"üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass

if __name__ == "__main__":
    main() 